"""
Django settings for users_backend project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""


import os
import json
from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, "users_main/.env"))

SECRET_KEY = env("DJANGO_SECRET")
DEBUG = env("DEBUG").lower() == "true"
STAGE = (env("STAGE").lower() == "true" or env("DATABASE_SELECTOR") == "dev")

if STAGE:
    stage_db_json = env("USERS_STAGE_DB")
    stage_solidgate_config_json = env("SOLIDGATE_CONFIG")
    stage_posthog_config_json = env("POSTHOG_CONFIG")
    stage_checkout_config_json = env("CHECKOUT_CONFIG")
    stage_conversions_config_json = env("CONVERSIONS_CONFIG")
    stage_pubsub_config_json = env("PUBSUB_CONFIG")
    stage_users_tasks_json = env("STAGE_USERS_TASKS")
    stage_jwt_secrets_json = env("JWT_SECRETS")
    prod_solidgate_config_json = None
    prod_db_json = None
    prod_posthog_config_json = None
    prod_checkout_config_json = None
    prod_conversions_config_json = None
    prod_pubsub_config_json = None
    prod_users_tasks_json = None
    prod_jwt_secrets_json = None
else:
    stage_db_json = None
    stage_solidgate_config_json = None
    stage_posthog_config_json = None
    stage_checkout_config_json = None
    stage_conversions_config_json = None
    stage_pubsub_config_json = None
    stage_users_tasks_json = None
    stage_jwt_secrets_json = None
    prod_solidgate_config_json = env("SOLIDGATE_CONFIG")
    prod_db_json = env("USERS_PROD_DB")
    prod_posthog_config_json = env("POSTHOG_CONFIG")
    prod_checkout_config_json = env("CHECKOUT_CONFIG")
    prod_conversions_config_json = env("CONVERSIONS_CONFIG")
    prod_pubsub_config_json = env("PUBSUB_CONFIG")
    prod_users_tasks_json = env("PROD_USERS_TASKS")
    prod_jwt_secrets_json = env("JWT_SECRETS")

aws_secrets_json = env("AWS_SECRETS")
gcp_infos_json = env("GCP_INFOS")

stage_db = json.loads(stage_db_json) if stage_db_json else {}
stage_solidgate_config = json.loads(stage_solidgate_config_json) if stage_solidgate_config_json else {}
stage_posthog_config = json.loads(stage_posthog_config_json) if stage_posthog_config_json else {}
stage_checkout_config = json.loads(stage_checkout_config_json) if stage_checkout_config_json else {}
stage_conversions_config = json.loads(stage_conversions_config_json) if stage_conversions_config_json else {}
stage_pubsub_config = json.loads(stage_pubsub_config_json) if stage_pubsub_config_json else {}
stage_users_tasks = json.loads(stage_users_tasks_json) if stage_users_tasks_json else {}
stage_jwt_secrets = json.loads(stage_jwt_secrets_json) if stage_jwt_secrets_json else {}
prod_solidgate_config = json.loads(prod_solidgate_config_json) if prod_solidgate_config_json else {}
prod_db = json.loads(prod_db_json) if prod_db_json else {}
prod_posthog_config = json.loads(prod_posthog_config_json) if prod_posthog_config_json else {}
prod_checkout_config = json.loads(prod_checkout_config_json) if prod_checkout_config_json else {}
prod_conversions_config = json.loads(prod_conversions_config_json) if prod_conversions_config_json else {}
prod_pubsub_config = json.loads(prod_pubsub_config_json) if prod_pubsub_config_json else {}
prod_users_tasks = json.loads(prod_users_tasks_json) if prod_users_tasks_json else {}
prod_jwt_secrets = json.loads(prod_jwt_secrets_json) if prod_jwt_secrets_json else {}

aws_secrets = json.loads(aws_secrets_json) if aws_secrets_json else {}
gcp_infos = json.loads(gcp_infos_json) if gcp_infos_json else {}


# HOSTS
ALLOWED_HOSTS = ['api.jobescape.me', 'api.jobescape.us']
if STAGE:
    ALLOWED_HOSTS = [
        'stage.api.jobescape.me', 
        'stage.api.jobescape.us', 
        'users-stage-397596874269.us-east1.run.app'
    ]
if DEBUG:
    ALLOWED_HOSTS.extend(['.localhost', '127.0.0.1', '[::1]', '0.0.0.0', env("NGROK_HOST", str)])
    CSRF_TRUSTED_ORIGINS = [
        "https://users-stage-397596874269.us-east1.run.app",
    ]
    # NGROK_IP = env("NGROK_IP", str)
    # CSRF_TRUSTED_ORIGINS = [NGROK_IP]


# CORS
CORS_ALLOWED_ORIGINS = [
    "https://jobescape.me",  # new funnel
    "https://api.jobescape.me",  # backend
    "https://app.jobescape.me",  # new app
    "https://api.ai.jobescape.me",  # new app
    "https://api.academy.jobescape.me",  # new app
    "https://jobescape.us",  # new app
    "https://app.jobescape.us",
    "https://analytics.jobescape.me",
    "https://myjobescape.com",
    "https://www.myjobescape.com",
]
if STAGE:
    CORS_ALLOWED_ORIGINS.extend([
        "https://stage.jobescape.me",  # stage app
        "https://funnels.jobescape.me",  # stage funnel
        "https://funnels.jobescape.us",  # stage funnel
    ])
if DEBUG:
    CORS_ALLOWED_ORIGINS.extend([
        "http://0.0.0.0:80",
        "http://172.31.19.3",
        "https://stage3.jobescape.me",
        env("LOCAL_IP", str),
        env("NGROK_IP", str)]
    )
    CORS_ALLOWED_ORIGIN_REGEXES = [
        r"^https:\/\/.+\.ngrok-free\.app$",
        r"^http:\/\/localhost(:[0-9]*)?$",
        r"^https:\/\/.+jobescape-team\.vercel\.app"
    ]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_spectacular',
    'polymorphic',
    'nested_admin',
    'corsheaders',
    'tinymce',
    'import_export',
    'storages',
    # Apps
    'account',
    'subscription',
    'payment_solidgate',
    'payment_checkout',
    'user_goal',
    'faq',
    'seo_blog',
    'web_analytics',
    'webinars',
    'job',
]
if DEBUG:
    INSTALLED_APPS.append('silk')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'custom.custom_middleware.growthbook_middleware',
]
if DEBUG:
    MIDDLEWARE.append('silk.middleware.SilkyMiddleware')

ROOT_URLCONF = 'users_main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'users_main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': stage_db.get('DEVELOPMENT_DB_NAME', ""),
        'USER': stage_db.get('DEVELOPMENT_DB_USER', ""),
        'PASSWORD': stage_db.get('DEVELOPMENT_DB_PASS', ""),
        'HOST': stage_db.get('DEVELOPMENT_DB_HOST', ""),
        'PORT': stage_db.get('DEVELOPMENT_DB_PORT', ""),
    },
    'dev': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': stage_db.get('DEVELOPMENT_DB_NAME', ""),
        'USER': stage_db.get('DEVELOPMENT_DB_USER', ""),
        'PASSWORD': stage_db.get('DEVELOPMENT_DB_PASS', ""),
        'HOST': stage_db.get('DEVELOPMENT_DB_HOST', ""),
        'PORT': stage_db.get('DEVELOPMENT_DB_PORT', ""),
    },
    'prod': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': prod_db.get('PRODUCTION_DB_NAME', ""),
        'USER': prod_db.get('PRODUCTION_DB_USER', ""),
        'PASSWORD': prod_db.get('PRODUCTION_DB_PASS', ""),
        'HOST': prod_db.get('PRODUCTION_DB_HOST', ""),
        'PORT': prod_db.get('PRODUCTION_DB_PORT', ""),
        'DISABLE_SERVER_SIDE_CURSORS': True,
    },
}
DATABASES["default"].update(DATABASES[env("DATABASE_SELECTOR")])



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = "account.CustomUser"

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': ('custom.custom_backend.PrefetchedJWTAuthentication',),
    # 'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticated',), # TODO: change
    # 'EXCEPTION_HANDLER': 'custom.custom_exception_handler.handler',
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
AWS_ACCESS_KEY_ID = aws_secrets.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = aws_secrets.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = aws_secrets.get('AWS_STORAGE_BUCKET_NAME')
AWS_CLOUDFRONT_DOMAIN = aws_secrets.get('AWS_CLOUDFRONT_DOMAIN')
AWS_S3_CUSTOM_DOMAIN = aws_secrets.get('AWS_S3_CUSTOM_DOMAIN')
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
if AWS_ACCESS_KEY_ID:
    SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin-allow-popups'
    MEDIAFILES_LOCATION = 'media'
    MEDIA_ROOT = '/%s/' % MEDIAFILES_LOCATION
    MEDIA_URL = '//%s/%s/' % (AWS_CLOUDFRONT_DOMAIN, MEDIAFILES_LOCATION)
    DEFAULT_FILE_STORAGE = 'custom.custom_storage.MediaStorage'

    STATICFILES_LOCATION = 'static'
    STATIC_ROOT = '/%s/' % STATICFILES_LOCATION
    # STATIC_URL = '//%s/%s/' % (AWS_CLOUDFRONT_DOMAIN, STATICFILES_LOCATION)
    STATIC_URL = 'https://%s/%s/' % (AWS_CLOUDFRONT_DOMAIN, STATICFILES_LOCATION)
    STATICFILES_STORAGE = 'custom.custom_storage.StaticStorage'

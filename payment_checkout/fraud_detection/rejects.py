
from django.utils import timezone
from django.utils.timezone import timedelta

from custom.custom_exceptions import FraudRejectException
from payment_checkout.fraud_models import FraudPayment

reject_geo = (
    'AF', 'TG', 'CU', 'ER', 'ET', 'GW', 'IR', 'KP', 'RU', 'SY', 'YE', 'MM', 'PA', 'CR',
    'MX', 'PE', 'OM', 'SV', 'AZ', 'MY', 'PS', 'RO', 'CZ', 'BO', 'AR', 'ZA', 'UY', 'GR', 'RS', 'KW'
)
reject_bin = (
    "421487", "421489", "407606", "417889", "465473", "465491", "465492", "465493", "486317", "401346",
    "434411", "434484", "434485", "434486", "434487", "452443", "458291", "485017", "412528", "414088",
    "422887", "424199", "446390", "446391", "447514", "447515", "48488100", "403184", "410730", "410731",
    "411687", "413052", "414399", "415470", "422838", "423218", "423373", "428918", "433102", "433309",
    "445986", "464405", "470394", "471420", "474806", "487487", "445452", "445453", "445454", "445455",
    "471346", "424428", "424490", "424491", "437435", "437518", "452401", "452434", "452435", "473838",
    "424493", "408396", "408397", "415428", "415429", "415481", "415482", "419539", "419540", "426101",
    "426102", "426113", "426114", "428804", "428905", "428906", "431727", "434135", "457222", "458410",
    "458411", "458443", "465816", "475791", "477714", "477964", "479004", "479087", "486724", "402728",
    "402982", "421398", "476953", "407262", "426738", "426739", "426903", "426904", "427067", "429964",
    "429969", "457930", "485016", "489193", "406452", "429048", "430189", "430190", "430191", "458251",
    "462206", "464520", "471292", "402457", "402909", "402910", "436398", "458559", "471436", "48313700",
    "402119", "416982", "416983", "471225", "472489", "473841", "402507", "404138", "404139", "404141",
    "411731", "411791", "423509", "426803", "426804", "430289", "439054", "439055", "439056", "439243",
    "439244", "439245", "441108", "441318", "447817", "447818", "447824", "451382", "469376", "471252",
    "472345", "475098", "476207", "476208", "490457", "400398", "400575", "401173", "402604", "402948",
    "404586", "405869", "405870", "405925", "406791", "406984", "409701", "409755", "411124", "412746",
    "413307", "414076", "415401", "420405", "420407", "425181", "426201", "428175", "428564", "429037",
    "429039", "429040", "429234", "434146", "434147", "446065", "450243", "452467", "456515", "462703",
    "462704", "462716", "462783", "464843", "464845", "465004", "465005", "465006", "465007", "465008",
    "465203", "467487", "473172", "479716", "479718", "479777", "483734", "484800", "485649", "47258000",
    "403542", "403626", "406334", "418906", "418907", "418908", "418909", "425170", "425534", "425535",
    "443886", "444094", "446942", "472934", "476804", "489186", "419394", "420363", "420364", "422576",
    "426343", "426344", "426345", "426346", "429017", "442464", "442477", "442478", "442479", "446929",
    "457832", "457833", "472287", "478674", "489165", "47312600", "413857", "415216", "449649", "449655",
    "473126", "41074500", "44965501", "46025701", "46390301", "46390801", "46392001", "416559",
    "416562", "439706", "478716", "478717", "400680", "402333", "403933", "417398", "427400", "427402",
    "427403", "427404", "427406", "427407", "427408", "427411", "427412", "427413", "427416", "427417",
    "427418", "427420", "427422", "427425", "427426", "427427", "427428", "427430", "427431", "427432",
    "427433", "427436", "427438", "427439", "427440", "427441", "427442", "427444", "427445", "427446",
    "427449", "427450", "427451", "427452", "427453", "427454", "427455", "427456", "427459", "427460",
    "427461", "427462", "427463", "427466", "427467", "427468", "427469", "427470", "427472", "427475",
    "427477", "427499", "427600", "427601", "427602", "427603", "427604", "427605", "427606", "427607",
    "427608", "427609", "427610", "427611", "427612", "427613", "427616", "427617", "427618", "427620",
    "427622", "427625", "427626", "427627", "427628", "427629", "427630", "427631", "427632", "427633",
    "427635", "427636", "427637", "427638", "427639", "427640", "427641", "427642", "427643", "427644",
    "427645", "427646", "427648", "427649", "427650", "427651", "427652", "427653", "427654", "427655",
    "427656", "427659", "427660", "427661", "427662", "427663", "427664", "427666", "427667", "427668",
    "427669", "427670", "427672", "427674", "427675", "427676", "427677", "427680", "427681", "427682",
    "427683", "427684", "427685", "427686", "427687", "427688", "427689", "427699", "427900", "427901",
    "427902", "427903", "427904", "427905", "427906", "427907", "427908", "427909", "427910", "427911",
    "427912", "427913", "427916", "427917", "427918", "427920", "427922", "427925", "427926", "427927",
    "427928", "427929", "427930", "427931", "427932", "427933", "427935", "427936", "427937", "427938",
    "427939", "427940", "427941", "427942", "427943", "427944", "427945", "427946", "427948", "427949",
    "427950", "427951", "427952", "427953", "427954", "427955", "427956", "427959", "427960", "427961",
    "427962", "427963", "427964", "427966", "427967", "427968", "427969", "427970", "427972", "427974",
    "427975", "427977", "427999", "475794", "475795", "481776", "481777", "481778", "481779", "481780",
    "481781", "481782", "483983", "485463", "442415", "442416", "467078", "467079", "470548", "470549",
    "403317", "403318", "403319", "403320", "404298", "427691", "437520", "437521", "437522", "489356",
    "489333", "489351", "46252343", "47480786", "47480879", "48933175", "48933185", "48933200",
    "48933213", "48933300", "48933370", "48933400", "48933410", "403154", "403709", "404007", "405676",
    "407374", "407380", "409398", "411732", "413064", "415039", "415042", "415043", "418868", "418869",
    "418870", "419215", "420453", "421191", "422425", "422538", "422982", "424646", "427229", "427230",
    "427275", "427726", "429565", "429749", "434157", "436469", "437424", "439050", "446479", "448343",
    "448344", "448345", "462017", "462043", "462235", "464787", "464842", "465206", "465207", "465218",
    "467058", "471229", "471230", "471265", "471461", "471487", "476989", "489327", "489347", "489348",
    "489349", "489350", "490809", "498629", "739430", "763788", "404805", "40480250", "40480251", "40484150",
    "40484151", "40484152", "40484153", "402326", "402340", "404802", "404841", "405899", "413877",
    "414657", "418334", "418989", "419905", "421394", "422754", "424204", "425694", "426815", "428180",
    "429939", "430181", "437524", "438970", "440503", "440666", "442187", "443272", "444238", "444240",
    "445236", "446091", "446946", "446950", "447767", "452235", "452236", "454082", "456821", "456825",
    "458723", "459226", "460257", "463903", "463908", "463920", "466764", "466765", "467455", "469670",
    "472419", "472480", "474218", "474820", "476997", "476998", "476999", "477223", "477908", "477986",
    "478390", "478475", "478476", "479578", "479579", "479580", "479581", "479582", "479584", "479585",
    "479586", "480087", "480099", "480106", "480110", "480111", "480112", "480113", "480114", "480623",
    "480938", "484881", "486099", "487444", "494128", "494129", "446867", "492095", "458047", "456457",
    "527601", "458044", "518725", "465345", "555888", "458083", "458016", "510008", "422061", "455744",
    "477213", "544315", "479213", "483314", "458094", "458017", "527520", "490144", "440393", "403163",
    "434559", "434866", "423223", "417707", "481518", "426367", "423087", "409230", "404031", "443238", "461131",
    "411398", "526185", "542418", "559619", "474477", "527519", "431622", "534860"
)


def reject_check_geo(geo: str):
    if geo in reject_geo:
        raise FraudRejectException("JobEscape is not supported in your country")


def reject_check_bin(bin: str):
    if bin in reject_bin:
        raise FraudRejectException("JobEscape is not supported by your bank")


def reject_cardHashByEmail(email: str):
    if FraudPayment.objects.filter(email=email, datetime__gte=timezone.now()-timedelta(hours=24)).values("fingerprint").distinct().count() > 7:
        raise FraudRejectException("Suspected Fraud 1")
    if FraudPayment.objects.filter(email=email, datetime__gte=timezone.now()-timedelta(minutes=30)).values("fingerprint").distinct().count() > 5:
        raise FraudRejectException("Suspected Fraud 2")


def reject_emailByCardHash(fingerprint: str):
    if FraudPayment.objects.filter(fingerprint=fingerprint, datetime__gte=timezone.now()-timedelta(hours=24)).values("email").distinct().count() > 6:
        raise FraudRejectException("Suspected Fraud 3")


def reject_orderByEmail(email: str):
    if FraudPayment.objects.filter(email=email, error_code__in=['20062', '30036', '30043', '30041'], datetime__gte=timezone.now()-timedelta(days=7)).count() > 3:
        raise FraudRejectException("Suspected Fraud 4")
    if FraudPayment.objects.filter(email=email, error_code__isnull=False, datetime__gte=timezone.now()-timedelta(days=7)).count() > 15:
        raise FraudRejectException("Suspected Fraud 5")


def reject_orderByCardHash(fingerprint: str):
    if FraudPayment.objects.filter(fingerprint=fingerprint, error_code__isnull=False, datetime__gte=timezone.now()-timedelta(minutes=30)).count() > 6:
        raise FraudRejectException("Suspected Fraud 6")
